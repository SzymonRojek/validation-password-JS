{"mappings":"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","sources":["src/helpers/countNumbers.js","src/helpers/countSpecialCharacters.js","src/helpers/countUpperLetters.js","src/helpers/hasNumber.js","src/helpers/hasSpecialCharacter.js","src/helpers/hasUpperLetter.js","src/helpers/hasProperLength.js","src/helpers/passwordScore.js","src/helpers/additionalMessage.js","src/helpers/getPasswordStrengthRating.js","src/js/main.js","src/helpers/isNotStringError.js"],"sourcesContent":["export default function countNumbers(password) {\n  let counterNumbers = 0;\n\n  for (const char of password) {\n    if (!isNaN(parseFloat(char))) {\n      counterNumbers++;\n      if (counterNumbers === 3) {\n        break;\n      }\n    }\n  }\n\n  return counterNumbers;\n}\n","export default function countSpecialCharacters(password) {\n  const specialCharacters = [\"@\", \"!\", \"#\"];\n  let counterSpecialCharacters = 0;\n\n  for (const char of specialCharacters) {\n    if (password.includes(char)) {\n      counterSpecialCharacters++;\n    }\n  }\n\n  return counterSpecialCharacters;\n}\n","export default function countUpperLetters(password) {\n  let counterUpperLetter = 0;\n\n  for (const letter of password) {\n    if (\n      letter.toLowerCase() !== letter.toUpperCase() &&\n      letter === letter.toUpperCase()\n    ) {\n      counterUpperLetter++;\n      if (counterUpperLetter === 2) {\n        break;\n      }\n    }\n  }\n\n  return counterUpperLetter;\n}\n","const numberError = { message: \"Password has to contain minimum one number!\" };\n\nexport default function hasNumber(password) {\n  let isNumber = false;\n\n  for (const char of password) {\n    if (!isNaN(parseFloat(char))) {\n      isNumber = true;\n      break;\n    }\n  }\n\n  if (!isNumber) {\n    return numberError;\n  }\n\n  return isNumber;\n}\n","const specialCharacterError = {\n  message: \"Password has to contain minimum one of '# @ !' special characters!\",\n};\n\nexport default function hasSpecialCharacter(password) {\n  const specialCharacters = [\"@\", \"!\", \"#\"];\n\n  let isChar = false;\n\n  for (const char of specialCharacters) {\n    if (password.includes(char)) {\n      isChar = true;\n      break;\n    }\n  }\n\n  if (!isChar) {\n    return specialCharacterError;\n  }\n\n  return isChar;\n}\n","const upperLetterError = {\n  message: \"Password has to contain minimum one capital letter!\",\n};\n\nexport default function hasUpperLetter(password) {\n  let hasUpperLetter = false;\n\n  for (const letter of password) {\n    if (\n      letter.toLowerCase() !== letter.toUpperCase() &&\n      letter === letter.toUpperCase()\n    ) {\n      hasUpperLetter = true;\n      break;\n    }\n  }\n\n  if (!hasUpperLetter) {\n    return upperLetterError;\n  }\n\n  return hasUpperLetter;\n}\n","const lengthError = {\n  message: \"The length should have min 5 & max 12 characters!\",\n};\n\nexport default function hasProperLength(password) {\n  if (password.length < 5 || password.length > 12) {\n    return lengthError;\n  }\n\n  return true;\n}\n","const passwordScore = [\n    { score: [1, 1, 1] },\n    { score: [1, 1, 2] },\n    { score: [1, 2, 1] },\n    { score: [1, 3, 1] },\n    { score: [2, 1, 1] },\n    { score: [1, 3, 2] },\n    { score: [1, 2, 2] },\n    { score: [2, 2, 1] },\n    { score: [2, 1, 2] },\n    { score: [3, 1, 1] },\n    { score: [2, 3, 1] },\n    { score: [2, 2, 2] },\n    { score: [2, 3, 2] },\n    { score: [3, 2, 1] },\n    { score: [3, 1, 2] },\n    { score: [3, 3, 1] },\n    { score: [3, 2, 2] },\n    { score: [3, 3, 2] },\n];\n\nexport default passwordScore;","function additionalMessage(message) {\n    const additionalScoreElement = document.querySelector(\n        \".js-additionalMessage\"\n    );\n\n    additionalScoreElement.innerHTML = `${message}`;\n}\n\nexport default additionalMessage;","function getPasswordStrengthRating(index) {\n    switch (index) {\n        case 0:\n        case 1:\n        case 2:\n            return \"& quite good\";\n        case 3:\n        case 4:\n            return \"& good enough\";\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n            return \"& really good\";\n        case 10:\n            return \"& strong enough\";\n        case 11:\n        case 12:\n            return \"& strong\";\n        case 13:\n        case 14:\n        case 15:\n            return \"& very strong\";\n        case 16:\n        case 17:\n        case 18:\n            return \"& very very strong\";\n        default:\n            return \"& weak\";\n    }\n}\n\nexport default getPasswordStrengthRating;","import {\n    countNumbers,\n    countSpecialCharacters,\n    countUpperLetters,\n    hasNumber,\n    hasProperLength,\n    hasSpecialCharacter,\n    hasUpperLetter,\n    isNotStringError,\n    passwordScore,\n    additionalMessage,\n    getPasswordStrengthRating,\n} from \"../helpers\";\n\n{\n    const passwordValue = document.querySelector(\".js-passwordInput\");\n    const errorPasswordReuired = [{ message: \"Password is required!\" }];\n\n    let errors = [];\n\n    function findPasswordErrors(password) {\n        isNotStringError(password);\n\n        const validationErrors = [\n            hasProperLength(password),\n            hasSpecialCharacter(password),\n            hasNumber(password),\n            hasUpperLetter(password),\n        ];\n\n        errors =\n            passwordValue.value !== \"\" ?\n            validationErrors.filter(({ message }) => message) :\n            errorPasswordReuired;\n    }\n\n    function getPasswordScore(password) {\n        return [\n            countSpecialCharacters(password),\n            countNumbers(password),\n            countUpperLetters(password),\n        ];\n    }\n\n    function renderErrors(value, passwordScore) {\n        const finalPasswordScoreData = getPasswordScore(value, getPasswordScore);\n        const findIndexMatchedScoreData = passwordScore.findIndex(\n            ({ score }) =>\n            JSON.stringify(score) === JSON.stringify(finalPasswordScoreData)\n        );\n\n        const passwordStrengthMessage = getPasswordStrengthRating(\n            findIndexMatchedScoreData\n        );\n\n        const messageErrorsToHTML = errors\n            .map(({ message }) => {\n                return `<li class=\"form__list-error\">\n              ${message}\n                </li>`;\n            })\n            .join(\"\");\n\n        if (!errors.length) {\n            additionalMessage(`Password is correct and ${passwordStrengthMessage}`);\n        }\n\n        const messageErrorsElement = document.querySelector(\".js-errors\");\n        messageErrorsElement.innerHTML = messageErrorsToHTML;\n    }\n\n    function render() {\n        findPasswordErrors(passwordValue.value);\n        renderErrors(passwordValue.value, passwordScore);\n    }\n\n    function onFormSubmit(event) {\n        event.preventDefault();\n\n        render();\n\n        passwordValue.value.trim();\n        passwordValue.focus();\n    }\n\n    function init() {\n        const form = document.querySelector(\".js-form\");\n\n        form.addEventListener(\"submit\", onFormSubmit);\n    }\n\n    init();\n}","export default function isNotStringError(password) {\n  if (typeof password !== \"string\") {\n    throw new Error(\"Given argument has to be a string!\");\n  }\n}\n"],"names":["$6dcee5195a3afd88$export$2e2bcd8739ae039","password","counterNumbers","char","isNaN","parseFloat","$e3e517dee881133c$export$2e2bcd8739ae039","specialCharacters","counterSpecialCharacters","includes","$4a8e18f78bae1b99$export$2e2bcd8739ae039","counterUpperLetter","letter","toLowerCase","toUpperCase","$8f42577f3a1feb19$var$numberError","message","$8f42577f3a1feb19$export$2e2bcd8739ae039","isNumber","$129ebdadf5a34127$var$specialCharacterError","$129ebdadf5a34127$export$2e2bcd8739ae039","isChar","$f544e0fc0b3973ac$var$upperLetterError","$f544e0fc0b3973ac$export$2e2bcd8739ae039","$69c63d70975d82ea$var$lengthError","$69c63d70975d82ea$export$2e2bcd8739ae039","length","$c1d425ada576f5d0$export$2e2bcd8739ae039","score","$ef4ac9525c185a16$export$2e2bcd8739ae039","document","querySelector","innerHTML","$653c306d2f31c56f$export$2e2bcd8739ae039","index","passwordValue","errorPasswordReuired","errors","$54b47fc030b7b21e$var$findPasswordErrors","Error","$9a308964c24cd524$export$2e2bcd8739ae039","validationErrors","value","filter","$54b47fc030b7b21e$var$getPasswordScore","$54b47fc030b7b21e$var$render","passwordScore","finalPasswordScoreData","findIndexMatchedScoreData","findIndex","JSON","stringify","passwordStrengthMessage","messageErrorsToHTML","map","join","$54b47fc030b7b21e$var$renderErrors","$54b47fc030b7b21e$var$onFormSubmit","event","preventDefault","trim","focus","addEventListener"],"version":3,"file":"index.79b5ea3b.js.map"}